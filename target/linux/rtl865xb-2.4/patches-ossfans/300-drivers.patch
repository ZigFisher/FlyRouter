Index: linux-2.4.27/drivers/char/console.c
===================================================================
--- linux-2.4.27.orig/drivers/char/console.c	2003-11-28 21:26:20.000000000 +0300
+++ linux-2.4.27/drivers/char/console.c	2008-03-21 14:37:48.000000000 +0300
@@ -67,6 +67,10 @@
  * Resurrected character buffers in videoram plus lots of other trickery
  * by Martin Mares <mj@atrey.karlin.mff.cuni.cz>, July 1998
  *
+ * Split out con_write_ctrl_* functions from do_con_write & changed
+ * vc_state to function pointer
+ * by Russell King <rmk@arm.linux.org.uk>, July 1998
+ *
  * Removed old-style timers, introduced console_timer, made timer
  * deletion SMP-safe.  17Jun00, Andrew Morton <andrewm@uow.edu.au>
  *
@@ -74,6 +78,8 @@
  * 13 March 2001, Andrew Morton
  */
 
+#define CONSOLE_WIP
+
 #include <linux/module.h>
 #include <linux/sched.h>
 #include <linux/tty.h>
@@ -847,7 +853,7 @@
 /* the default colour table, for VGA+ colour systems */
 int default_red[] = {0x00,0xaa,0x00,0xaa,0x00,0xaa,0x00,0xaa,
     0x55,0xff,0x55,0xff,0x55,0xff,0x55,0xff};
-int default_grn[] = {0x00,0x00,0xaa,0x55,0x00,0x00,0xaa,0xaa,
+int default_grn[] = {0x00,0x00,0xaa,0xaa,0x00,0x00,0xaa,0xaa,
     0x55,0x55,0xff,0xff,0x55,0x55,0xff,0xff};
 int default_blu[] = {0x00,0x00,0x00,0x00,0xaa,0xaa,0xaa,0xaa,
     0x55,0x55,0x55,0x55,0xff,0xff,0xff,0xff};
@@ -1393,6 +1399,19 @@
 	need_wrap = 0;
 }
 
+static int con_write_ctrl_ESnormal(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESesc(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESnonstd(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESpalette(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESsquare(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESgetpars(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESgotpars(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESpercent(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESfunckey(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_EShash(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESsetG0(int, struct tty_struct *, unsigned int);
+static int con_write_ctrl_ESsetG1(int, struct tty_struct *, unsigned int);
+
 enum { ESnormal, ESesc, ESsquare, ESgetpars, ESgotpars, ESfunckey,
 	EShash, ESsetG0, ESsetG1, ESpercent, ESignore, ESnonstd,
 	ESpalette };
@@ -1402,7 +1421,7 @@
 {
 	top		= 0;
 	bottom		= video_num_lines;
-	vc_state	= ESnormal;
+	vc_state	= con_write_ctrl_ESnormal;
 	ques		= 0;
 	translate	= set_translate(LAT1_MAP,currcons);
 	G0_charset	= LAT1_MAP;
@@ -1500,87 +1519,146 @@
 		disp_ctrl = 0;
 		return;
 	case 24: case 26:
-		vc_state = ESnormal;
+		vc_state = con_write_ctrl_ESnormal;
 		return;
 	case 27:
-		vc_state = ESesc;
+		vc_state = con_write_ctrl_ESesc;
 		return;
 	case 127:
 		del(currcons);
 		return;
 	case 128+27:
-		vc_state = ESsquare;
+		vc_state = con_write_ctrl_ESsquare;
 		return;
 	}
-	switch(vc_state) {
-	case ESesc:
-		vc_state = ESnormal;
+	vc_state(currcons, tty, c);
+}
+
+static int con_write_utf(int currcons, int c)
+{
+	unsigned int chr;
+
+	/* Combine UTF-8 into Unicode */
+	/* Incomplete characters silently ignored */
+	if (c < 0x80) {
+		utf_count = 0;
+		return c;
+	}
+
+	if (utf_count > 0 && (c & 0xc0) == 0x80) {
+		chr = (utf_char << 6) | (c & 0x3f);
+		utf_count--;
+		if (utf_count == 0)
+			return chr;
+	} else {
+		unsigned int count;
+		if ((c & 0xe0) == 0xc0) {
+			count = 1;
+			chr = (c & 0x1f);
+		} else if ((c & 0xf0) == 0xe0) {
+			count = 2;
+			chr = (c & 0x0f);
+		} else if ((c & 0xf8) == 0xf0) {
+			count = 3;
+			chr = (c & 0x07);
+		} else if ((c & 0xfc) == 0xf8) {
+			count = 4;
+			chr = (c & 0x03);
+		} else if ((c & 0xfe) == 0xfc) {
+			count = 5;
+			chr = (c & 0x01);
+		} else {
+			count = 0;
+			chr = 0;
+		}
+		utf_count = count;
+	}
+
+	utf_char = chr;
+	return -1;
+}
+
+static int con_write_ctrl_ESnormal(int currcons, struct tty_struct *tty, unsigned int c)
+{
+	return 0;
+}
+
+static int con_write_ctrl_ESesc(int currcons, struct tty_struct *tty, unsigned int c)
+{
+	vc_state = con_write_ctrl_ESnormal;
 		switch (c) {
 		case '[':
-			vc_state = ESsquare;
-			return;
+		vc_state = con_write_ctrl_ESsquare;
+		break;
 		case ']':
-			vc_state = ESnonstd;
-			return;
+		vc_state = con_write_ctrl_ESnonstd;
+		break;
 		case '%':
-			vc_state = ESpercent;
-			return;
+		vc_state = con_write_ctrl_ESpercent;
+		break;
 		case 'E':
 			cr(currcons);
 			lf(currcons);
-			return;
+		break;
 		case 'M':
 			ri(currcons);
-			return;
+		break;
 		case 'D':
 			lf(currcons);
-			return;
+		break;
 		case 'H':
 			tab_stop[x >> 5] |= (1 << (x & 31));
-			return;
+		break;
 		case 'Z':
 			respond_ID(tty);
-			return;
+		break;
 		case '7':
 			save_cur(currcons);
-			return;
+		break;
 		case '8':
 			restore_cur(currcons);
-			return;
+		return 1;
 		case '(':
-			vc_state = ESsetG0;
-			return;
+		vc_state = con_write_ctrl_ESsetG0;
+		break;
 		case ')':
-			vc_state = ESsetG1;
-			return;
+		vc_state = con_write_ctrl_ESsetG1;
+		break;
 		case '#':
-			vc_state = EShash;
-			return;
+		vc_state = con_write_ctrl_EShash;
+		break;
 		case 'c':
 			reset_terminal(currcons,1);
-			return;
+		return 1;
 		case '>':  /* Numeric keypad */
 			clr_kbd(kbdapplic);
-			return;
+		break;
 		case '=':  /* Appl. keypad */
 			set_kbd(kbdapplic);
-			return;
+	 	break;
 		}
-		return;
-	case ESnonstd:
-		if (c=='P') {   /* palette escape sequence */
+	return 0;
+}
+
+static int con_write_ctrl_ESnonstd(int currcons, struct tty_struct *tty, unsigned int c)
+{
+	switch (c) {
+	case 'P': /* palette escape sequence */
 			for (npar=0; npar<NPAR; npar++)
 				par[npar] = 0 ;
 			npar = 0 ;
-			vc_state = ESpalette;
-			return;
-		} else if (c=='R') {   /* reset palette */
+		vc_state = con_write_ctrl_ESpalette;
+		break;
+	case 'R': /* reset palette */
 			reset_palette(currcons);
-			vc_state = ESnormal;
-		} else
-			vc_state = ESnormal;
-		return;
-	case ESpalette:
+	default:
+		vc_state = con_write_ctrl_ESnormal;
+	}
+	return 0;
+}
+
+static int con_write_ctrl_ESpalette(int currcons, struct tty_struct *tty, unsigned int c)
+{
 		if ( (c>='0'&&c<='9') || (c>='A'&&c<='F') || (c>='a'&&c<='f') ) {
 			par[npar++] = (c>'9' ? (c&0xDF)-'A'+10 : c-'0') ;
 			if (npar==7) {
@@ -1592,48 +1670,59 @@
 				palette[i] = 16*par[j++];
 				palette[i] += par[j];
 				set_palette(currcons);
-				vc_state = ESnormal;
+			vc_state = con_write_ctrl_ESnormal;
 			}
 		} else
-			vc_state = ESnormal;
-		return;
-	case ESsquare:
+		vc_state = con_write_ctrl_ESnormal;
+	return 0;
+}
+
+static int con_write_ctrl_ESsquare(int currcons, struct tty_struct *tty, unsigned int c)
+{
 		for(npar = 0 ; npar < NPAR ; npar++)
 			par[npar] = 0;
 		npar = 0;
-		vc_state = ESgetpars;
+	vc_state = con_write_ctrl_ESgetpars;
 		if (c == '[') { /* Function key */
-			vc_state=ESfunckey;
-			return;
+		vc_state = con_write_ctrl_ESfunckey;
+		return 0;
 		}
 		ques = (c=='?');
 		if (ques)
-			return;
-	case ESgetpars:
+		return 0;
+	return con_write_ctrl_ESgetpars(currcons, tty, c);
+}
+
+static int con_write_ctrl_ESgetpars(int currcons, struct tty_struct *tty, unsigned int c)
+{
 		if (c==';' && npar<NPAR-1) {
 			npar++;
-			return;
+		return 0;
 		} else if (c>='0' && c<='9') {
 			par[npar] *= 10;
 			par[npar] += c-'0';
-			return;
-		} else vc_state=ESgotpars;
-	case ESgotpars:
-		vc_state = ESnormal;
+		return 0;
+	} else vc_state = con_write_ctrl_ESgotpars;
+	return con_write_ctrl_ESgotpars(currcons, tty, c);
+}
+
+static int con_write_ctrl_ESgotpars(int currcons, struct tty_struct *tty, unsigned int c)
+{
+	vc_state = con_write_ctrl_ESnormal;
 		switch(c) {
 		case 'h':
 			set_mode(currcons,1);
-			return;
+		return 0;
 		case 'l':
 			set_mode(currcons,0);
-			return;
+		return 0;
 		case 'c':
 			if (ques) {
 				if (par[0])
 					cursor_type = par[0] | (par[1]<<8) | (par[2]<<16);
 				else
 					cursor_type = CUR_DEFAULT;
-				return;
+			return 0;
 			}
 			break;
 		case 'm':
@@ -1643,7 +1732,7 @@
 					complement_mask = par[0]<<8 | par[1];
 				else
 					complement_mask = s_complement_mask;
-				return;
+			return 0;
 			}
 			break;
 		case 'n':
@@ -1653,69 +1742,69 @@
 				else if (par[0] == 6)
 					cursor_report(currcons,tty);
 			}
-			return;
+		return 0;
 		}
 		if (ques) {
 			ques = 0;
-			return;
+		return 0;
 		}
 		switch(c) {
 		case 'G': case '`':
 			if (par[0]) par[0]--;
 			gotoxy(currcons,par[0],y);
-			return;
+		break;
 		case 'A':
 			if (!par[0]) par[0]++;
 			gotoxy(currcons,x,y-par[0]);
-			return;
+		break;
 		case 'B': case 'e':
 			if (!par[0]) par[0]++;
 			gotoxy(currcons,x,y+par[0]);
-			return;
+		break;
 		case 'C': case 'a':
 			if (!par[0]) par[0]++;
 			gotoxy(currcons,x+par[0],y);
-			return;
+		break;
 		case 'D':
 			if (!par[0]) par[0]++;
 			gotoxy(currcons,x-par[0],y);
-			return;
+		break;
 		case 'E':
 			if (!par[0]) par[0]++;
 			gotoxy(currcons,0,y+par[0]);
-			return;
+		break;
 		case 'F':
 			if (!par[0]) par[0]++;
 			gotoxy(currcons,0,y-par[0]);
-			return;
+		break;
 		case 'd':
 			if (par[0]) par[0]--;
 			gotoxay(currcons,x,par[0]);
-			return;
+		break;
 		case 'H': case 'f':
 			if (par[0]) par[0]--;
 			if (par[1]) par[1]--;
 			gotoxay(currcons,par[1],par[0]);
-			return;
+		break;
 		case 'J':
 			csi_J(currcons,par[0]);
-			return;
+		break;
 		case 'K':
 			csi_K(currcons,par[0]);
-			return;
+		break;
 		case 'L':
 			csi_L(currcons,par[0]);
-			return;
+		break;
 		case 'M':
 			csi_M(currcons,par[0]);
-			return;
+		break;
 		case 'P':
 			csi_P(currcons,par[0]);
-			return;
+		break;
 		case 'c':
 			if (!par[0])
 				respond_ID(tty);
-			return;
+		break;
 		case 'g':
 			if (!par[0])
 				tab_stop[x >> 5] &= ~(1 << (x & 31));
@@ -1726,16 +1815,16 @@
 					tab_stop[3] =
 					tab_stop[4] = 0;
 			}
-			return;
+		break;
 		case 'm':
 			csi_m(currcons);
-			return;
+		return 1;
 		case 'q': /* DECLL - but only 3 leds */
 			/* map 0,1,2,3 to 0,1,2,4 */
 			if (par[0] < 4)
 				setledstate(kbd_table + currcons,
 					    (par[0] < 3) ? par[0] : 4);
-			return;
+		break;
 		case 'r':
 			if (!par[0])
 				par[0]++;
@@ -1748,41 +1837,50 @@
 				bottom=par[1];
 				gotoxay(currcons,0,0);
 			}
-			return;
+		break;
 		case 's':
 			save_cur(currcons);
-			return;
+		break;
 		case 'u':
 			restore_cur(currcons);
-			return;
+		return 1;
 		case 'X':
 			csi_X(currcons, par[0]);
-			return;
+		break;
 		case '@':
 			csi_at(currcons,par[0]);
-			return;
+		break;
 		case ']': /* setterm functions */
 			setterm_command(currcons);
-			return;
+		break;
 		}
-		return;
-	case ESpercent:
-		vc_state = ESnormal;
+	return 0;
+}
+
+static int con_write_ctrl_ESpercent(int currcons, struct tty_struct *tty, unsigned int c)
+{
+	vc_state = con_write_ctrl_ESnormal;
 		switch (c) {
 		case '@':  /* defined in ISO 2022 */
 			utf = 0;
-			return;
+		break;
 		case 'G':  /* prelim official escape code */
 		case '8':  /* retained for compatibility */
 			utf = 1;
-			return;
+		break;
 		}
-		return;
-	case ESfunckey:
-		vc_state = ESnormal;
-		return;
-	case EShash:
-		vc_state = ESnormal;
+	return 0;
+}
+
+static int con_write_ctrl_ESfunckey(int currcons, struct tty_struct *tty, unsigned int c)
+{
+	vc_state = con_write_ctrl_ESnormal;
+	return 0;
+}
+
+static int con_write_ctrl_EShash(int currcons, struct tty_struct *tty, unsigned int c)
+{
+	vc_state = con_write_ctrl_ESnormal;
 		if (c == '8') {
 			/* DEC screen alignment test. kludge :-) */
 			video_erase_char =
@@ -1792,36 +1890,55 @@
 				(video_erase_char & 0xff00) | ' ';
 			do_update_region(currcons, origin, screenbuf_size/2);
 		}
-		return;
-	case ESsetG0:
-		if (c == '0')
+	return 0;
+}
+
+static int con_write_ctrl_ESsetG0(int currcons, struct tty_struct *tty, unsigned int c)
+{
+	switch (c) {
+	case '0':
 			G0_charset = GRAF_MAP;
-		else if (c == 'B')
+		break;
+	case 'B':
 			G0_charset = LAT1_MAP;
-		else if (c == 'U')
+		break;
+	case 'U':
 			G0_charset = IBMPC_MAP;
-		else if (c == 'K')
+		break;
+	case 'K':
 			G0_charset = USER_MAP;
-		if (charset == 0)
+		break;
+	}
+	if (charset == 0) {
 			translate = set_translate(G0_charset,currcons);
-		vc_state = ESnormal;
-		return;
-	case ESsetG1:
-		if (c == '0')
+		return 1;
+	}
+	vc_state = con_write_ctrl_ESnormal;
+	return 0;
+}
+
+static int con_write_ctrl_ESsetG1(int currcons, struct tty_struct *tty, unsigned int c)
+{
+	switch (c) {
+	case '0':
 			G1_charset = GRAF_MAP;
-		else if (c == 'B')
+		break;
+	case 'B':
 			G1_charset = LAT1_MAP;
-		else if (c == 'U')
+		break;
+	case 'U':
 			G1_charset = IBMPC_MAP;
-		else if (c == 'K')
+		break;
+	case 'K':
 			G1_charset = USER_MAP;
-		if (charset == 1)
+		break;
+	}
+	if (charset == 1) {
 			translate = set_translate(G1_charset,currcons);
-		vc_state = ESnormal;
-		return;
-	default:
-		vc_state = ESnormal;
+		return 1;
 	}
+	vc_state = con_write_ctrl_ESnormal;
+	return 0;
 }
 
 /* This is a temporary buffer used to prepare a tty console write
@@ -1855,7 +1972,7 @@
 	unsigned long draw_from = 0, draw_to = 0;
 	struct vt_struct *vt = (struct vt_struct *)tty->driver_data;
 	u16 himask, charmask;
-	const unsigned char *orig_buf = NULL;
+	const unsigned char *orig_buf;
 	int orig_count;
 
 	if (in_interrupt())
@@ -1913,42 +2030,12 @@
 		count--;
 
 		if (utf) {
-		    /* Combine UTF-8 into Unicode */
-		    /* Incomplete characters silently ignored */
-		    if(c > 0x7f) {
-			if (utf_count > 0 && (c & 0xc0) == 0x80) {
-				utf_char = (utf_char << 6) | (c & 0x3f);
-				utf_count--;
-				if (utf_count == 0)
-				    tc = c = utf_char;
-				else continue;
-			} else {
-				if ((c & 0xe0) == 0xc0) {
-				    utf_count = 1;
-				    utf_char = (c & 0x1f);
-				} else if ((c & 0xf0) == 0xe0) {
-				    utf_count = 2;
-				    utf_char = (c & 0x0f);
-				} else if ((c & 0xf8) == 0xf0) {
-				    utf_count = 3;
-				    utf_char = (c & 0x07);
-				} else if ((c & 0xfc) == 0xf8) {
-				    utf_count = 4;
-				    utf_char = (c & 0x03);
-				} else if ((c & 0xfe) == 0xfc) {
-				    utf_count = 5;
-				    utf_char = (c & 0x01);
-				} else
-				    utf_count = 0;
+			tc = con_write_utf(currcons, c);
+			if (tc < 0)
 				continue;
-			      }
-		    } else {
-		      tc = c;
-		      utf_count = 0;
-		    }
-		} else {	/* no utf */
+			c = tc;
+		} else	/* no utf */
 		  tc = translate[toggle_meta ? (c|0x80) : c];
-		}
 
                 /* If the original code was a control character we
                  * only allow a glyph to be displayed if the code is
@@ -1966,7 +2053,7 @@
                         && (c != 127 || disp_ctrl)
 			&& (c != 128+27);
 
-		if (vc_state == ESnormal && ok) {
+		if (vc_state == con_write_ctrl_ESnormal && ok) {
 			/* Now try to find out how to display it */
 			tc = conv_uni_to_pc(vc_cons[currcons].d, tc);
 			if ( tc == -4 ) {
@@ -2112,7 +2199,7 @@
 	if (kmsg_redirect && vc_cons_allocated(kmsg_redirect - 1))
 		currcons = kmsg_redirect - 1;
 
-	/* read `x' only after setting currecons properly (otherwise
+	/* read `x' only after setting currcons properly (otherwise
 	   the `x' macro will read the x of the foreground console). */
 	myx = x;
 
Index: linux-2.4.27/drivers/char/n_r3964.c
===================================================================
--- linux-2.4.27.orig/drivers/char/n_r3964.c	2003-06-13 18:51:33.000000000 +0400
+++ linux-2.4.27/drivers/char/n_r3964.c	2008-03-21 14:37:48.000000000 +0300
@@ -13,6 +13,12 @@
  * L. Haag
  *
  * $Log: n_r3964.c,v $
+ * Revision 1.1.1.1  2004/08/20 11:30:07  r04482
+ * no message
+ *
+ * Revision 1.2  2004/05/31 02:32:31  rupert
+ * Initial 2.4.26 merge
+ *
  * Revision 1.8  2000/03/23 14:14:54  dwmw2
  * Fix race in sleeping in r3964_read()
  *
@@ -217,7 +223,7 @@
 {
    int status;
    
-   printk ("r3964: Philips r3964 Driver $Revision: 1.8 $\n");
+   printk ("r3964: Philips r3964 Driver $Revision: 1.1.1.1 $\n");
 
    /*
     * Register the tty line discipline
Index: linux-2.4.27/drivers/char/random.c
===================================================================
--- linux-2.4.27.orig/drivers/char/random.c	2004-02-18 16:36:31.000000000 +0300
+++ linux-2.4.27/drivers/char/random.c	2008-03-21 14:37:48.000000000 +0300
@@ -538,12 +538,6 @@
 	memset(r->pool, 0, r->poolinfo.POOLBYTES);
 }
 
-static void free_entropy_store(struct entropy_store *r)
-{
-	if (r->pool)
-		kfree(r->pool);
-	kfree(r);
-}
 
 /*
  * This function adds a byte into the entropy "pool".  It does not
@@ -721,6 +715,17 @@
 static struct timer_rand_state *blkdev_timer_state[MAX_BLKDEV];
 
 /*
+ * This function adds entropy to the pool from an external source.
+ *
+ * This is normally used by other drivers who have some strong random
+ * number source (for example true random number generator hardware).
+ */
+void random_add_entropy(__u32 x, __u32 y)
+{
+	batch_entropy_store(x, y, 32);
+}
+
+/*
  * This function adds entropy to the entropy "pool" by using timing
  * delays.  It uses the timer_rand_state structure to make an estimate
  * of how many bits of entropy this call has added to the pool.
@@ -1740,6 +1745,13 @@
 static int min_write_thresh, max_write_thresh;
 static char sysctl_bootid[16];
 
+static void free_entropy_store(struct entropy_store *r)
+{
+	if (r->pool)
+		kfree(r->pool);
+	kfree(r);
+}
+
 /*
  * This function handles a request from the user to change the pool size 
  * of the primary entropy store.
@@ -2312,6 +2324,7 @@
 
 
 
+EXPORT_SYMBOL(random_add_entropy);
 #ifndef CONFIG_ARCH_S390
 EXPORT_SYMBOL(add_keyboard_randomness);
 EXPORT_SYMBOL(add_mouse_randomness);
Index: linux-2.4.27/drivers/char/serial.c
===================================================================
--- linux-2.4.27.orig/drivers/char/serial.c	2004-02-18 16:36:31.000000000 +0300
+++ linux-2.4.27/drivers/char/serial.c	2008-03-21 14:37:48.000000000 +0300
@@ -112,11 +112,14 @@
 #define CONFIG_SERIAL_MULTIPORT
 #define CONFIG_HUB6
 #endif
+#ifdef CONFIG_SERIAL_SHARE_IRQ
+#undef CONFIG_SERIAL_SHARE_IRQ
+#endif
 
 #ifdef CONFIG_PCI
 #define ENABLE_SERIAL_PCI
-#ifndef CONFIG_SERIAL_SHARE_IRQ
-#define CONFIG_SERIAL_SHARE_IRQ
+#ifdef CONFIG_SERIAL_SHARE_IRQ
+#undef CONFIG_SERIAL_SHARE_IRQ
 #endif
 #ifndef CONFIG_SERIAL_MANY_PORTS
 #define CONFIG_SERIAL_MANY_PORTS
@@ -136,8 +139,9 @@
 /* Set of debugging defines */
 
 #undef SERIAL_DEBUG_INTR
-#undef SERIAL_DEBUG_OPEN
-#undef SERIAL_DEBUG_FLOW
+//#define SERIAL_DEBUG_INTR 1
+//#define SERIAL_DEBUG_OPEN
+#define SERIAL_DEBUG_FLOW
 #undef SERIAL_DEBUG_RS_WAIT_UNTIL_SENT
 #undef SERIAL_DEBUG_PCI
 #undef SERIAL_DEBUG_AUTOCONF
@@ -165,7 +169,7 @@
 
 #define CONFIG_SERIAL_RSA
 
-#define RS_STROBE_TIME (10*HZ)
+#define RS_STROBE_TIME (20*HZ)
 #define RS_ISR_PASS_LIMIT 256
 
 #if defined(__i386__) && (defined(CONFIG_M386) || defined(CONFIG_M486))
@@ -325,9 +332,10 @@
 MODULE_PARM(force_rsa, "1-" __MODULE_STRING(PORT_RSA_MAX) "i");
 MODULE_PARM_DESC(force_rsa, "Force I/O ports for RSA");
 #endif /* CONFIG_SERIAL_RSA  */
+	/*{ 0, ATLAS_BASE_BAUD, ATLAS_UART_REGS_BASE, ATLASINT_UART, STD_COM_FLAGS },     ttyS0 */
 
-struct serial_state rs_table[RS_TABLE_SIZE] = {
-	SERIAL_PORT_DFNS	/* Defined in serial.h */
+struct serial_state rs_table[RS_TABLE_SIZE] = { 
+	 SERIAL_PORT_DFNS	
 };
 
 #define NR_PORTS	(sizeof(rs_table)/sizeof(struct serial_state))
@@ -413,39 +421,21 @@
 	return 0;
 }
 
-static _INLINE_ unsigned int serial_in(struct async_struct *info, int offset)
+static unsigned int serial_in(struct async_struct *info, int offset)
 {
-	switch (info->io_type) {
-#ifdef CONFIG_HUB6
-	case SERIAL_IO_HUB6:
-		outb(info->hub6 - 1 + offset, info->port);
-		return inb(info->port+1);
-#endif
-	case SERIAL_IO_MEM:
-		return readb((unsigned long) info->iomem_base +
-			     (offset<<info->iomem_reg_shift));
-	default:
-		return inb(info->port + offset);
-	}
+	unsigned char value;
+	value = *(unsigned char*)(info->iomem_base +
+			      (offset<<info->iomem_reg_shift));
+	return (int)value;
+	
 }
 
-static _INLINE_ void serial_out(struct async_struct *info, int offset,
+static void serial_out(struct async_struct *info, int offset,
 				int value)
 {
-	switch (info->io_type) {
-#ifdef CONFIG_HUB6
-	case SERIAL_IO_HUB6:
-		outb(info->hub6 - 1 + offset, info->port);
-		outb(value, info->port+1);
-		break;
-#endif
-	case SERIAL_IO_MEM:
-		writeb(value, (unsigned long) info->iomem_base +
-			      (offset<<info->iomem_reg_shift));
-		break;
-	default:
-		outb(value, info->port+offset);
-	}
+	*(unsigned char*)(info->iomem_base +
+			      (offset<<info->iomem_reg_shift))=(unsigned char)value;
+	
 }
 
 /*
@@ -842,15 +842,10 @@
 		if (status & UART_LSR_DR)
 			receive_chars(info, &status, regs);
 		check_modem_status(info);
-#ifdef CONFIG_MELAN
 		if ((status & UART_LSR_THRE) ||
 			/* for buggy ELAN processors */
 			((iir & UART_IIR_ID) == UART_IIR_THRI))
 			transmit_chars(info, 0);
-#else
-		if (status & UART_LSR_THRE)
-			transmit_chars(info, 0);
-#endif
 
 	next:
 		info = info->next_port;
@@ -894,8 +889,9 @@
 #ifdef SERIAL_DEBUG_INTR
 	printk("rs_interrupt_single(%d)...", irq);
 #endif
-
+	/* rupert*/
 	info = IRQ_ports[irq];
+	//info = IRQ_ports[0];
 	if (!info || !info->tty)
 		return;
 
@@ -914,15 +910,10 @@
 		if (status & UART_LSR_DR)
 			receive_chars(info, &status, regs);
 		check_modem_status(info);
-#ifdef CONFIG_MELAN
 		if ((status & UART_LSR_THRE) ||
 		    /* For buggy ELAN processors */
 		    ((iir & UART_IIR_ID) == UART_IIR_THRI))
 			transmit_chars(info, 0);
-#else
-		if (status & UART_LSR_THRE)
-			transmit_chars(info, 0);
-#endif
 		if (pass_counter++ > RS_ISR_PASS_LIMIT) {
 #if SERIAL_DEBUG_INTR
 			printk("rs_single loop break.\n");
@@ -3245,7 +3248,7 @@
 	info->pgrp = current->pgrp;
 
 #ifdef SERIAL_DEBUG_OPEN
-	printk("rs_open ttys%d successful...", info->line);
+	printk("rs_open ttys%d successful...\n", info->line);
 #endif
 	return 0;
 }
@@ -3336,8 +3339,8 @@
 	return ret;
 }
 
-static int rs_read_proc(char *page, char **start, off_t off, int count,
-			int *eof, void *data)
+int rs_read_proc(char *page, char **start, off_t off, int count,
+		 int *eof, void *data)
 {
 	int i, len = 0, l;
 	off_t	begin = 0;
@@ -3746,14 +3749,7 @@
 		/* Check for Startech UART's */
 		serial_outp(info, UART_LCR, UART_LCR_DLAB);
 		if (serial_in(info, UART_EFR) == 0) {
-			serial_outp(info, UART_EFR, 0xA8);
-			if (serial_in(info, UART_EFR) == 0) {
-				/* We are a NS16552D/Motorola
-				 * 8xxx DUART, stop. */
-				goto out;
-			}
 			state->type = PORT_16650;
-			serial_outp(info, UART_EFR, 0);
 		} else {
 			serial_outp(info, UART_LCR, 0xBF);
 			if (serial_in(info, UART_EFR) == 0)
@@ -3802,7 +3798,6 @@
 		}
 	}
 #endif
-out:
 	serial_outp(info, UART_LCR, save_lcr);
 	if (state->type == PORT_16450) {
 		scratch = serial_in(info, UART_SCR);
@@ -4366,10 +4361,9 @@
 #ifdef CONFIG_DDB5074
 	pbn_nec_nile4,
 #endif
-
-	pbn_dci_pccom4,
+#if 0
 	pbn_dci_pccom8,
-
+#endif
 	pbn_xircom_combo,
 
 	pbn_siig10x_0,
@@ -4463,10 +4457,9 @@
 	{ SPCI_FL_BASE0, 1, 520833,			   /* pbn_nec_nile4 */
 		64, 3, NULL, 0x300 },
 #endif
-
-	{SPCI_FL_BASE3, 4, 115200, 8},			   /* pbn_dci_pccom4 */
-	{SPCI_FL_BASE3, 8, 115200, 8},			   /* pbn_dci_pccom8 */
-
+#if 0	/* PCI_DEVICE_ID_DCI_PCCOM8 ? */		   /* pbn_dci_pccom8 */
+	{ SPCI_FL_BASE3, 8, 115200, 8 },
+#endif
 	{ SPCI_FL_BASE0, 1, 115200,			  /* pbn_xircom_combo */
 		0, 0, pci_xircom_fn },
 
@@ -4927,12 +4920,11 @@
 		pbn_nec_nile4 },
 #endif
 
-	{	PCI_VENDOR_ID_DCI, PCI_DEVICE_ID_DCI_PCCOM4,
-		PCI_ANY_ID, PCI_ANY_ID, 0, 0,
-		pbn_dci_pccom4 },
+#if 0	/* PCI_DEVICE_ID_DCI_PCCOM8 ? */
 	{	PCI_VENDOR_ID_DCI, PCI_DEVICE_ID_DCI_PCCOM8,
 		PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 		pbn_dci_pccom8 },
+#endif
 
        { PCI_ANY_ID, PCI_ANY_ID, PCI_ANY_ID, PCI_ANY_ID,
 	 PCI_CLASS_COMMUNICATION_SERIAL << 8, 0xffff00, },
@@ -5258,7 +5250,7 @@
 	{	0, }
 };
 
-static inline void avoid_irq_share(struct pci_dev *dev)
+static void inline avoid_irq_share(struct pci_dev *dev)
 {
 	int i, map = 0x1FF8;
 	struct serial_state *state = rs_table;
@@ -5295,7 +5287,7 @@
        return 0;
 }
 
-static inline int check_compatible_id(struct pci_dev *dev)
+static int inline check_compatible_id(struct pci_dev *dev)
 {
        int i;
        for (i = 0; i < DEVICE_COUNT_COMPATIBLE; i++)
@@ -5401,16 +5393,18 @@
 /*
  * The serial driver boot-time initialization code!
  */
-static int __init rs_init(void)
+int __init rs_init(void)
 {
 	int i;
 	struct serial_state * state;
 
 	init_bh(SERIAL_BH, do_serial_bh);
 	init_timer(&serial_timer);
+#if 1 
 	serial_timer.function = rs_timer;
 	mod_timer(&serial_timer, jiffies + RS_STROBE_TIME);
-
+#endif
+#if 1
 	for (i = 0; i < NR_IRQS; i++) {
 		IRQ_ports[i] = 0;
 		IRQ_timeout[i] = 0;
@@ -5419,7 +5413,8 @@
 		       sizeof(struct rs_multiport_struct));
 #endif
 	}
-#ifdef CONFIG_SERIAL_CONSOLE
+#endif
+#if  0
 	/*
 	 *	The interrupt of the serial console port
 	 *	can't be shared.
@@ -5446,7 +5441,7 @@
 	serial_driver.name = "ttyS";
 #endif
 	serial_driver.major = TTY_MAJOR;
-	serial_driver.minor_start = 64 + SERIAL_DEV_OFFSET;
+	serial_driver.minor_start = 64;
 	serial_driver.name_base = SERIAL_DEV_OFFSET;
 	serial_driver.num = NR_PORTS;
 	serial_driver.type = TTY_DRIVER_TYPE_SERIAL;
@@ -5878,7 +5846,7 @@
 
 static kdev_t serial_console_device(struct console *c)
 {
-	return MKDEV(TTY_MAJOR, 64 + c->index);
+	return MKDEV(TTY_MAJOR, 64) ;
 }
 
 /*
